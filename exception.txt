appset.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "profiles": {
    "IIS Express": {
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }

}



Startup.cs : 

public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { 
 if (env.IsDevelopment()) 
 { 
 app.UseDeveloperExceptionPage(); 
 } 
 else 
 { 
 app.UseExceptionHandler("/Home/Error"); 
 app.UseHsts(); 
 } 
 app.UseHttpsRedirection(); 
 app.UseStaticFiles(); 
 app.UseRouting(); 
 app.UseAuthorization(); 
 app.UseEndpoints(endpoints => 
 { 
 endpoints.MapControllerRoute( 
 name: "default", 
 pattern: "{controller=Home}/{action=Index}/{id?}"); 
 }); 
}
services.AddControllersWithViews(options => 
{ 
 options.Filters.Add<CustomExceptionFilter>(); 
}); 

// Register in Startup.cs 
services.AddControllersWithViews(options => 
{ 
 options.Filters.Add<CustomExceptionFilter>(); 
}); 




HomeController.cs 
using System.Diagnostics;
using Exception1.Models;
using Microsoft.AspNetCore.Mvc;

namespace Exception1.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            _logger.LogInformation("Index page visited at {time}", DateTime.Now);
            return View();
        }
        public IActionResult Boom()
        {
            throw new Exception("Test exception");
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View();
        }
        public IActionResult Divide(int a, int b)
        {
            try
            {
                int result = a / b;
                return Ok($"Result is {result}");
            }
            catch (DivideByZeroException ex)
            {
                _logger.LogError(ex, "Attempted Division by zero.");
                return BadRequest("Division by zero is not allowed.");
            }
        }

    }
}


Views/Shared/Error.cshtml:

@{ 
 ViewData["Title"] = "Error"; 
} 
<h2>Oops! Something went wrong.</h2> 
<p>Please try again later.</p>


/Filter/CustomExceptionFilter.cs : 

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.Extensions.Logging;

namespace MvcExceptionLoggingDemo.Filters
{
    public class CustomExceptionFilter : IExceptionFilter
    {
        private readonly ILogger<CustomExceptionFilter> _logger;

        public CustomExceptionFilter(ILogger<CustomExceptionFilter> logger)
        {
            _logger = logger;
        }

        public void OnException(ExceptionContext context)
        {
            _logger.LogError(context.Exception, "Unhandled exception occurred.");

            context.Result = new ViewResult
            {
                ViewName = "~/Views/Shared/Error.cshtml"
            };

            context.ExceptionHandled = true;
        }
    }
}




HomeController.cs

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        _logger.LogInformation("Index page visited at {time}", DateTime.Now);
        return View();
    }

    public IActionResult Boom()
    {
        throw new Exception("Test exception");
    }
}


/Home/Divide?a=10&b=2
/Home/Divide?a=10&b=0